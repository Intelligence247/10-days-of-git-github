Configure your name and your email
Open the Git bash if your device is Windows, or open the Mac terminal if your device is MacOS and then write the following commands

git config --global user.name 'yourname'
git config --global user.email 'youremail'

After doing git init
then the next step can be (git add .) which I usually use most of the times, 
But it we can also use 
git add fileName

in this process the file added will be the only one to be pushed to github

multiple files can be added
git add fileName1 fileName2 fileName3

wow It is even possible to add and commit at same time see the command below
  git commit -am 'commit message'

7. And now the unstage has been practice confirmed on gihub also

One thing I will remind my self is while trying to unstage a file, make sure on the right directory, While having issue I realise I was not on the right directory then I tried this (git reset HEAD day-1/day-1.txt).

Don't forget this is what unstage means, Unstage will remove a file from pushing the changes to gihub, any chnaged made on that file will not show on github

if for Example I have a folder in my project named day-2, and there are a lot of files there which I want to unstage them all, I can run this command (git reset HEAD day-2/)
Although it is impossible to unstage a folder but a hack to unstage all files inside a folder. lol, let's go!!!


8. (git log) is used to see the history of your pushes to github, it shows the time and date in full

(git log -5 or git log -n 5) will check history upto five previous commit
git log --oneline
it also show the history of commit
The git log --oneline command allows to list minified log history

13. Creating a branch
We can create a copy of the master(main) using a branch. You built an awesome application. You like to keep this awesome application as it is but you like to add some features. This is the time, you need branching the master. The branch is the copy of the master at branching instant. After branching, the branch and the master don't see each other. You can create as many branches as you want.

* Only to create a branch
git branch branch-name

* To create and checkout to the branch at the same time
git checkout -b branch-name

* To list down all the branches:
    git branch

17. Push
Combining these components, the (git push -u origin main) command pushes the local "main" branch to the "origin" remote repository and sets the upstream relationship, so future pushes and pulls can be done with shorthand commands.

Now I can see the importance of upstream and it is very interesting

And now this is how to merge from local remote or lemme say using command without going to github

After creating a new branch and changes has been made in that new branch e.g (dev), after pushing to github with this branch, this pushes will not show on the main branch which is the initial branch, and the changed will not show locally also. for it to be useful, we have to merge it together on github or merge it with command, see below,
1. switch to main branch
2. run the command (git merge dev)
and everything will be upto date
This can can be done after pulling also
    git checkout yourbranch
    git pull origin develop

    git checkout develop
    git merge yourbranch
    git push -u origin develop

    21. Rename Branch
    To rename a current branch
    (git branch -m <newname>)
    Everything has to be put to practice

    * To rename any branch
    git branch -m <oldname> <newname>

22. Deleting branch

To delete a local branch

git branch -d branch-name
git branch -D branch-name

You must not be on the branch you want to delete
the two commands can be used

* To delete remote branch
git push <remote_name> :<branch_name>

23. THe .gitignore file

Any file you committed could be pushed to a remote repository but sometimes you may not want to push everything you have on your local repository. For instance sensitive data such as email, password, bank account, API Keys and others. Therefore, any files or folders that is listed on the .ignore file will not be tracked by Git. Create a .ignore file on the top level of your project directory, on this file put file names or folder you would like to ignore


24. Forking

After forking, we can clone the repository and work on the cloned version of the project. After modifiying the original we can push to the forked verion of the repository. In addition, we can send a pull request to the original repo to contribute on the project.

Congratulations! Now, you have a solid foundation of Git and GitHub



Git cheat sheet:
Here you have the basic git commands which might be useful:
git --version     # Check the version
git help          # Get help from git
git help commit   # Get help for the commit command
git config        # Get information about configuration
git config --list # Check all what is configured
git config --global user.name "username" # Configuring git user name
git config --global user.email "email"   # Configuring git user email

git init          # Initialize git repository local machine
git status        # Check changes or status of file(s) in repository

git add filename1.txt # Adding only one file
git add filename1.txt filename2.txt # Add multiple files
git add . # Add all the files and folders to the staging area

git commit -a # Stage and write a commit message in Nano
git commit -m "commit message" # Write a commit message after staging
git commit -am "commit message" # Grab everything & skip the stage process

git log  # See the history on the repository
git log --oneline
git log -<limit>
git log --author ="name" # To check change by specific user
git log --graph # Visualize the history

git diff # Compare working copy in the repository
git diff --staged # Compare files in the staging area

git checkout -- filename # To get working copy back
git reset HEAD filename # Removes from the staging area / (unstage)
git checkout <branch-name> <path to file> # Checkout file from different branch
git checkout <commit-id> -- <path to file> # Checkout file from specific commit

git remote -v  # View remote repository-Urls
git remote add <remote name> repository-Url # Add a new remote
git push -u remote master # Push the file into github
git checkout <commit-id> -- filename #

git rm filename1 # Delete one tracked file
git mv filename1 filename2 # Delete tracked file(s)
git mv filename1 foldername/filename1 # Move file to a folder

git branch # to list branches
git branch branch-name # to create a branch
git checkout branch-name # to checkout to a certain branch
git checkout -b branch-name # to create a branch and checkout at the same time
git merge branch-name # to merge a branch to the current branch